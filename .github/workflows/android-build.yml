name: Build AOSP (Android OS)

on:
  push:
    branches:
      - main   # Replace with the branch you're working on (main or any other)
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest   # GitHub provides Ubuntu runners for Linux-based builds

    steps:
      - name: Checkout code
        uses: actions/checkout@v3   # Pulls your repository code

      - name: Set up Java (required for AOSP build)
        uses: actions/setup-java@v3
        with:
          java-version: '11'   # AOSP needs Java 11

      - name: Install required dependencies
        run: |
          sudo apt update
          sudo apt install -y \
            repo \
            git \
            curl \
            python3 \
            python3-pip \
            openjdk-11-jdk \
            lib32z1 \
            lib32ncurses6 \
            lib32stdc++6 \
            libsdl1.2-dev \
            bc \
            g++-multilib \
            gcc-multilib

      - name: Initialize repo tool
        run: |
          mkdir -p ~/bin
          curl https://storage.googleapis.com/git-repo-downloads/repo > ~/bin/repo
          chmod a+x ~/bin/repo
          export PATH=~/bin:$PATH

      - name: Sync AOSP repositories
        run: |
          mkdir aosp
          cd aosp
          repo init -u https://android.googlesource.com/platform/manifest -b android-12.0.0_r1  # Replace with your desired AOSP branch
          repo sync -j4   # Adjust -j4 for faster or slower sync based on your runner's capabilities

      - name: Set up build environment
        run: |
          cd aosp
          source build/envsetup.sh

      - name: Build AOSP
        run: |
          cd aosp
          lunch aosp_x86_64-eng   # Replace with your target device (e.g., 'aosp_x86_64-userdebug')
          make -j4   # Adjust -j4 for more/less parallelism, based on available resources

      - name: Archive build artifacts
        run: |
          cd aosp
          mkdir -p build_output
          cp out/target/product/x86_64/*.img build_output/   # Customize with your output files
          tar -czf build_output.tar.gz build_output/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: aosp-build
          path: build_output.tar.gz
